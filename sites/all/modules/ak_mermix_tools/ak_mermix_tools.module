<?php

/**
 * Implements hook_field_access
 */
function ak_mermix_tools_field_access($op, $field, $entity_type, $entity, $account) {
    $hiddenFields = array('field_location', 'field_licence', 'field_featured', 'field_product_slideshow');
    if (in_array($field['field_name'], $hiddenFields) && $op == 'edit') {
	// Only allow admins to edit field value
	return user_access('administer nodes', $account);
    }
    return true;
}

function ak_mermix_tools_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    
    if ($form_id == 'apartment_node_form') {
	$is_admin = user_access('administer nodes', $user);
	$add = !isset($form_state['node']->nid) || isset($form_state['node']->is_new);
	$node_edit = isset($form['#node_edit_form']) && $form['#node_edit_form'] ? TRUE : FALSE;
	if ($node_edit) {
	    if(!$is_admin){
	    $form['#attached']['js'] = array(
		drupal_get_path('module', 'ak_mermix_tools') . '/mermix_tools_tips.js' => array('scope' => 'footer'),
	      );
	    }
	    $user_data = user_load($user->uid);
	    $lat = $user_data->field_place['und']['0']['lat'];
	    $lon = $user_data->field_place['und']['0']['lon'];
	    $defaultlat = $form['field_address']['und'][0]['geom']['#default_value']['lat'];
	    $defaultlon = $form['field_address']['und'][0]['geom']['#default_value']['lon'];
	    $userLocation = false;
	    if (($lat == $defaultlat) && ($lon == $defaultlon)) {
		$userLocation = true;
	    }
	    if (empty($lat) && empty($lon)) {
		$user_message = t('Your address information is empty and you can configure it <a href="@here" target="_blank">here</a>', array('@here' => url('user/' . $user->uid . '/edit')));
	    }
	    $form['language']['#access'] = $is_admin;
	    $form['field_address']['#prefix'] = '<div class="toggle-address-field">';
	    $form['field_address']['#suffix'] = '</div>';
	    $form['address_checkbox'] = array(
		'#type' => 'checkbox',
		'#title' => t('Use profile address'),
		'#attributes' => array('class' => array('enable-user-address')),
		'#weight' => 3,
		'#default_value' => !isset($user_message) && ($add || $userLocation),
		'#suffix' => isset($user_message) ? $user_message : '',
		'#disabled' => isset($user_message),
		'#attached' => array('js' => array(
			drupal_get_path('module', 'ak_mermix_tools') . '/mermix_tools.js',
			array(
			    'data' => array(
				'userPlace' => array(
				    'lat' => $lat,
				    'lon' => $lon,
				)),
			    'type' => 'setting',
			),
		    )),
	    );
	    if (!$is_admin) {
		$fieldCollection = $form['field_multiprice']['und'];
		foreach ($fieldCollection as $key => $value) {
		    if (is_numeric($value) && ($value >= 0)) {
			$form['field_multiprice']['und'][$value]['field_multiprice_value']['und'][0]['value']['#title_display'] = 'invisible';
			$form['field_multiprice']['und'][$value]['field_multiprice_unit']['und']['#title_display'] = 'invisible';
		    }
		}
	    }
	}
    }
    if (substr($form_id, 0, strrpos($form_id, '_')) == 'webform_client_form') {
	foreach ($form['submitted'] as $key => $value) {
	    if (strpos($key, 'date_') !== false) {
		$form['submitted'][$key] = array_merge($value, array(
		    '#type' => module_exists('date_popup') ? 'date_popup' : 'textfield',
		    '#attributes' => array('name' => 'submitted[' . $key . ']'),
		    '#date_type' => DATE_DATETIME,
		    '#date_timezone' => module_exists('date_api') ? date_default_timezone() : variable_get('date_default_timezone', @date_default_timezone_get()),
		    '#date_format' => 'd-m-Y',
		    '#date_increment' => 1,
		    '#date_year_range' => '-3:+3',
		));
	    }
	}
    }
}

function ak_mermix_tools_date_popup_process_alter(&$element, &$form_state, $context) {
    unset($element['date']['#title']);
    unset($element['date']['#description']);
    unset($element['time']['#title']);
    unset($element['time']['#description']);
}

function ak_mermix_tools_form_user_register_form_alter(&$form, &$form_state) {
    $replacements = array('Owner' => t('Machinery owner'),
	'Renter' => t('Renter'),
	'Professional' => t('Machinery renter and owner')
    );
    $options = $form['autoassignrole_user']['user_roles']["#options"];
    foreach ($options as $key => $option) {
	$options[$key] = isset($replacements[$option]) ? $replacements[$option] : $option;
    }

    $form['autoassignrole_user']['user_roles']["#options"] = $options;
}

function ak_mermix_tools_module_implements_alter(&$implementations, $hook) {
    if ($hook == 'form_alter') {
	$module = 'ak_mermix_tools';
	// store
	$group = array($module => $implementations[$module]);
	// unset
	unset($implementations[$module]);
	// add to the end
	$implementations = $implementations + $group;
    }
}

/**
 * Implements hook_node_presave
 * @param type $node
 */
function ak_mermix_tools_node_update($node) {
    global $user;
    if ($node->type == 'apartment' && user_access('administer nodes', $user)) {
	$node_original = entity_metadata_wrapper('node', $node->original);
	$node_wrapper = entity_metadata_wrapper('node', $node);
	if (($node_original->field_address->value()['lat'] != $node_wrapper->field_address->value()['lat']) ||
		($node_original->field_address->value()['lon'] != $node_wrapper->field_address->value()['lon']) ||
		(!$node_wrapper->field_location->value() &&
		($node_original->status->value() == '0' && $node_wrapper->status->value() == '1'))) {
	    watchdog('mermix tools', 'changing location');
	    ak_mermix_tools_updateAddress($node_wrapper); //changing a field here
	    field_attach_update('node', $node); //call field attach update to save field 
	}
    }
}

/**
 * Helper function to update / populate address fields
 * @param type $entWrapper
 */
function ak_mermix_tools_updateAddress($entWrapper) {

    $lat = $entWrapper->field_address->value()['lat'];
    $lon = $entWrapper->field_address->value()['lon'];
    if ($lat && $lon) {
	$json = '{
    "type": "Point",
    "coordinates": [' . $lon . ',' . $lat . ']
    }';
	geophp_load();
	$addressEl = geoPHP::load($json, 'json')->out('google_geocode', 'array', 'el');
	$addressEn = geoPHP::load($json, 'json')->out('google_geocode', 'array', 'en');
	$tid = mtools_createTerms(mtools_getTerms($addressEl, $addressEn), 'location');
	$entWrapper->field_location->set($tid);
    }
}

function mtools_getTerms($addressEl, $addressEn) {
    $acceptable = array('locality', 'administrative_area_level_5', 'administrative_area_level_4', 'administrative_area_level_3');
    $terms = array();
    foreach ($addressEl as $key => $addressElement) {
	if (in_array($addressElement->types[0], $acceptable)) {
	    $terms[$addressElement->long_name] = $addressEn[$key]->long_name;
	}
    }
    return $terms;
}

function mtools_createTerms($terms, $vocabulary_name) {

    $voc = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $parent = 0;

    foreach (array_reverse($terms) as $elname => $enname) {
	$found_terms = taxonomy_get_term_by_name($enname, $vocabulary_name);
	if (empty($found_terms)) { //create term
	    $term = (object) array(
			'vid' => $voc->vid,
			'name' => $enname,
			'format' => 'filtered_html',
			'parent' => $parent
	    );
	    taxonomy_term_save($term);
	    $parent = $term->tid;
	    i18n_string_translation_update(
		    array('taxonomy', 'term', $parent, 'name'), // Path where to store source and translation.
		    $elname, 'el', $enname
	    );
	} else {
	    $found = array_shift($found_terms);
	    $parent = $found->tid;
	}
    }
    return $term ? $term->tid : $parent;
}

/**
 * Alter the outgoing response.
 *
 * @param mixed $response
 *   The response data being returned by the REST service (not yet serialized).
 * @param string $function
 *   The function being called on the REST service.
 * @param string $format
 *   The name of the format serializing the response.
 * @param RestWSResourceControllerInterface $resourceController
 *   The resource controller.
 */
function ak_mermix_tools_restws_response_alter(&$response, $function, $formatName, $resourceController) {
    if ($function == 'queryResource' && $formatName == 'json') {
	//e.g. node.json?type=apartment&limit=10
	foreach ($response['list'] as $key => $listitem) {
	    $fid = $listitem['field_image']['file']['id']; //get the file id
	    $file = file_load($fid);
	    $uri = $file->uri; //create the uri
	    $mediumUrl = image_style_url('mobile', $uri); // use a style from /admin/config/media/image-styles machine name
	    $response['list'][$key]['field_image'] = $mediumUrl; //replace the original response
	}
    } else if ($function == 'viewResource' && $formatName == 'json') {
	//e.g. node/204.json
	if (isset($response['field_image'])) {
	    $fid = $response['field_image']['file']['id']; //get the file id
	    $file = file_load($fid);
	    $uri = $file->uri; //create the uri
	    $mediumUrl = image_style_url('mobile', $uri); // use a style from /admin/config/media/image-styles machine name
	    $response['field_image'] = $mediumUrl; //replace the original response
	}
    }
}

/*
 * Implement hook_js_alter
 */

function ak_mermix_tools_js_alter(&$javascript) {
    if (isset($javascript['modules/user/user.js'])) {
	$javascript['modules/user/user.js']['data'] = drupal_get_path('module', 'ak_mermix_tools') . '/user.js';
    }
}

/* Create a block to hold the search form */

function ak_mermix_tools_block_info() {
    $blocks = array();

    $blocks['machinery_search_block_banner'] = array(
	'info' => t('Machinery search with banner'),
	//'title' => t('Search machines'),
	'region' => 'map',
	'status' => 1,
    );
    $blocks['machinery_search_block'] = array(
	'info' => t('Machinery search'),
	//'title' => t('Search machines'),
	'region' => 'content',
	'status' => 1,
    );

    return $blocks;
}

function ak_mermix_tools_block_view($delta = '') {
    $block = array();

    switch ($delta) {
	case 'machinery_search_block' :
	    $block['content'] = ak_mermix_tools_block_content();
	    break;
	case 'machinery_search_block_banner' :
	    $block['content'] = ak_mermix_tools_block_content_banner();
	    break;
    }

    return $block;
}

function ak_mermix_tools_block_content() {
    return drupal_get_form('machinery_search_form');
}

function ak_mermix_tools_block_content_banner() {
    $out = '<div class="banner">';
    $out .= drupal_render(drupal_get_form('machinery_search_form'));
    $out .= '</div>';
    return $out;
}

/*
 * Create the custom form
 */
function machinery_search_form($form, &$form_state) {
    $all_scripts = drupal_add_js();
    $attach = array('js' => array(
	    drupal_get_path('module', 'ak_mermix_tools') . '/addressautocomplete.js' => array('scope' => 'footer'),
    ));
    if (!$all_scripts['https://maps.googleapis.com/maps/api/js?&sensor=false&key=AIzaSyC-MmVaJu3PMimL9iYQDzPaYFJ9ShvGcDI&libraries=places'] && current_path() != 'machinery-search') {
	$attach['js']['https://maps.googleapis.com/maps/api/js?key=AIzaSyC-MmVaJu3PMimL9iYQDzPaYFJ9ShvGcDI&libraries=places'] = array('type' => 'external', 'scope' => 'footer');
    }
    $form['wrapper_start'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="inline-form">',
    );
    $form['place'] = array(
	'#type' => 'textfield',
	//'#title' => t('Where'),
	'#default_value' => isset($_SESSION['search_criteria']['place']) ? $_SESSION['search_criteria']['place'] : '',
	'#attached' => $attach,
    );
    $form['machine_type'] = array(
	'#type' => 'select',
	//'#title' => t('Type'),
	'#default_value' => isset($_SESSION['search_criteria']['machine_type']) ? $_SESSION['search_criteria']['machine_type'] : '',
	'#options' => taxonomy_allowed_values(field_info_field('field_type')),
	'#empty_option' => t('Select category'),
    );
    $form['date_from'] = array(
	'#type' => module_exists('date_popup') ? 'date_popup' : 'textfield',
	//'#title' => t('From date'),
	'#attributes' => array('placeholder' => t('from date')),
	'#default_value' => isset($_SESSION['search_criteria']['date_from']) ? $_SESSION['search_criteria']['date_from'] : '',
	'#date_type' => DATE_DATETIME,
	'#date_timezone' => module_exists('date_api') ? date_default_timezone() : variable_get('date_default_timezone', @date_default_timezone_get()),
	'#date_format' => 'd-m-Y',
	'#date_increment' => 1,
	'#date_year_range' => '-3:+3',
    );
    $form['date_to'] = array(
	'#type' => module_exists('date_popup') ? 'date_popup' : 'textfield',
	//'#title' => t('To date'),
	'#attributes' => array('placeholder' => t('to date')),
	'#default_value' => isset($_SESSION['search_criteria']['date_to']) ? $_SESSION['search_criteria']['date_to'] : '',
	'#date_type' => DATE_DATETIME,
	'#date_timezone' => module_exists('date_api') ? date_default_timezone() : variable_get('date_default_timezone', @date_default_timezone_get()),
	'#date_format' => 'd-m-Y',
	'#date_increment' => 1,
	'#date_year_range' => '-3:+3',
    );
    $form['coords'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_SESSION['search_criteria']['coords']) ? $_SESSION['search_criteria']['coords'] : '',
	'#attributes' => array('id' => 'coords'),
    );
    $form['submit_button'] = array(
	'#type' => 'submit',
	'#value' => t('Search'),
    );
    $form['wrapper_end'] = array(
	'#type' => 'markup',
	'#markup' => '</div>',
    );
    //$form['#action'] = url('machine-results');
    return $form;
}

/*
 * Create custom form as first step to add a machine
 */
function machinery_add_form($form, &$form_state) {
   $logged = user_is_logged_in();
   $attach = array('js' => array(
	    drupal_get_path('module', 'ak_mermix_tools') . '/addressautocomplete.js' => array('scope' => 'footer'),
	    'https://maps.googleapis.com/maps/api/js?key=AIzaSyC-MmVaJu3PMimL9iYQDzPaYFJ9ShvGcDI&libraries=places' => array('type' => 'external', 'scope' => 'footer'),
   ));
   //Name
   $form['machine_name'] = array(
	'#type' => 'textfield',
	'#title' => t('Name'),
	'#required' => true,
	'#default_value' => '',
    );
   //Type
   $form['machine_type'] = array(
	'#type' => 'select',
	'#title' => t('Type'),
	'#default_value' => '',
	'#options' => taxonomy_allowed_values(field_info_field('field_type')),
	'#empty_option' => t('Select category'),
    );
   //Location
    $form['place'] = array(
	'#type' => 'textfield',
	'#title' => t('Location'),
	'#default_value' => '',
	'#required' => true,
	'#attached' => $attach,
    );
   $form['coords'] = array(
	'#type' => 'hidden',
	'#default_value' => '',
	'#attributes' => array('id' => 'coords'),
    );
   //Cultivation
    $form['machine_cultivation'] = array(
	'#type' => 'select',
	'#title' => t('Cultivation'),
	'#multiple' => true,
	'#required' => true,
	'#default_value' => '',
	'#options' => taxonomy_allowed_values(field_info_field('field_cultivation')),
	'#empty_option' => t('Select category'),
    );
    $form['submit_button'] = array(
	'#type' => 'submit',
	'#value' => t('Continue'),
	//'#prefix' => $logged ? '':'<div id="hello"></div>',
	'#attributes' => $logged ? array() : array('class' => array('ctools-modal-modal-popup-small')),
	//'#ajax' => $logged ? array() : array(
	//'wrapper' => 'hello',
	//'callback' => 'ak_mermix_tools_login',  
	//'path' => 'ak_mermix_tools/nojs/login',  
      //),
    );
//    if(!$logged) {
//    ctools_include('modal');
//    ctools_modal_add_js();
//    }
    return $form;
}

//Cannot use form_name_submit function when $['#action'] is defined
function machinery_search_form_submit($form, &$form_state) {
    if (!$form_state['values']['machine_type']) {
	$form_state['values']['machine_type'] = 'all';
    }
    $_SESSION['search_criteria'] = array_intersect_key($form_state['values'], array('place' => '', 'machine_type' => '', 'date_from' => '', 'date_to' => '', 'coords' => ''));
    $form_state['redirect'] = 'machinery-search';
}

function machinery_add_form_submit($form, &$form_state){
    global $user;
    $machine_data = array_intersect_key($form_state['values'], array_flip(array('machine_name', 'machine_type', 'place', 'coords', 'machine_cultivation')));
    //if not logged in save to session and redirect to login
    if(user_is_logged_in()) {
	$nid = mtools_create_node($machine_data, $user->uid);
	$_SESSION['first_update'] = true;
	$form_state['redirect'] = 'node/' . $nid . '/edit';
    } else {
	//var_dump(session_id());exit;
	$_SESSION['user_add_data'] = $machine_data;
	$form_state['redirect'] = 'user/login';
	//save data to session
    }
}

function ak_mermix_tools_menu() {
    $items['machinery-search'] = array(
	'title' => 'Search',
	'page callback' => 'search_machinery',
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
    );
    $items['machinery-add'] = array(
	'title' => t('Add your machine'),
	'page callback' => 'add_machinery',
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
    );
    $items['ak_mermix_tools/%ctools_js/login'] = array(
      'title' => 'Login',
      'page callback' => 'ak_mermix_tools_login_form',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * A modal login callback.
 */
function ak_mermix_tools_login($form, &$form_state) {
  ctools_include('modal');
  ctools_include('ajax');
  $output = drupal_http_request(url('ak_mermix_tools/ajax/login',array('absolute' => true)))->data;
  //$output = ctools_modal_form_wrapper('user_login', $form_state);
  print ajax_render($output);
  exit;
}

/**
 * A modal login callback.
 */
function ak_mermix_tools_login_form($js = NULL) {
    
    // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('user_login');
  }

  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
    $output = array();
    //code to add the node here
    $output[] = ctools_ajax_command_redirect('user');
  }
  print ajax_render($output);
  exit;
}

function search_machinery() {
    drupal_add_js('https://maps.googleapis.com/maps/api/js?key=AIzaSyC-MmVaJu3PMimL9iYQDzPaYFJ9ShvGcDI&libraries=places', 'external', array('scope' => 'footer'));
    if (!isset($_SESSION['search_criteria']) && $_SERVER['REQUEST_METHOD'] === 'GET') {
	return array(drupal_get_form('machinery_search_form'), array('#markup' => '<h2>Not found</h2>'));
    }
    $search_criteria = $_SESSION['search_criteria'];
    $page_content = array();
    $dates = '';
    $search_criteria['coords'] = $search_criteria['coords'] ? $search_criteria['coords'] : 'all';
    $search_criteria['date_from'] = strtotime($search_criteria['date_from']);
    $search_criteria['date_to'] = strtotime($search_criteria['date_to']);
    $page_content['form'] = drupal_get_form('machinery_search_form');
    if ($search_criteria['date_from'] && $search_criteria['date_to']) {
	$dates = date('Y-m-d', $search_criteria['date_from']) . '--' . date('Y-m-d', $search_criteria['date_to']);
	$result = views_get_view_result('machine_results', 'page', $search_criteria['coords'], $search_criteria['machine_type'], $dates);
	$page_content['view'] = is_object($result[0]) ? array('#markup' => views_embed_view('machine_results', 'page', $search_criteria['coords'], $search_criteria['machine_type'], $dates)) : array('#markup' => '<h2>Not found</h2>');
    } else {
	$result = views_get_view_result('machine_results', 'page', $search_criteria['coords'], $search_criteria['machine_type']);
	$page_content['view'] = is_object($result[0]) ? array('#markup' => views_embed_view('machine_results', 'page', $search_criteria['coords'], $search_criteria['machine_type'])) : array('#markup' => '<h2>Not found</h2>');
    }
    unset($_SESSION['search_criteria']);
    return $page_content;
}

function add_machinery() {
    //return drupal_get_form('user_login');
    return drupal_get_form('machinery_add_form');
}

function ak_mermix_tools_user_login(&$edit, $account){
    if(isset($_SESSION['user_add_data'])){
	$nid = mtools_create_node($_SESSION['user_add_data'],$account->uid);
	unset($_SESSION['user_add_data']);
	$_SESSION['first_update'] = true;
	drupal_goto('node/' . $nid . '/edit');
    }
}
/**
 * Function to create an equipment type node with given data
 * 
 */
function mtools_create_node($data,$uid) {
    global $language;
	$coords = explode(',',$data['coords']);
	$node = new stdClass();
	$node->title = $data['machine_name'];
	$node->type = 'apartment';
	node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
	$node->language = $language->language; // Or e.g. 'en' if locale is enabled
	$node->uid = $uid; 
	$node->status = 0; //(1 or 0): published or not
	$node->promote = 0; //(1 or 0): promoted to front page
	
	$node->field_address['und']['0'] = geofield_compute_values(
                array('lat' => $coords[0],'lon' => $coords[1],), GEOFIELD_INPUT_LAT_LON);
	// Term reference (taxonomy) field
	$node->field_type['und'][0]['tid'] = $data['machine_type'];
	foreach ($data['machine_cultivation'] as $key => $value) {
	  $node->field_cultivation['und'][$key]['tid'] = $value;  
	}
	// 'node' is default,
	// Other possible values are "user" and  "taxonomy_term" 
        $node = node_submit($node); // Prepare node for saving
	node_save($node);
	return $node->nid;
}